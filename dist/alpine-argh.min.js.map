{
  "version": 3,
  "sources": ["../src/index.js", "../builds/browser.js"],
  "sourcesContent": ["export default function (Alpine) {\n  // The directive\n  Alpine.directive('argh', (el, { value, modifiers, expression }, { effect, evaluate }) => {\n    // Value is\n    // required\n    if (!value) {\n      return\n    }\n\n    let { argObj, argName, deep } = resolve(el._x_dataStack, expression)\n    const propObj = el._x_dataStack[0]\n    const propName = camelize(value)\n    const bind = argObj && modifiers.includes('bind')\n\n    let prevPropValue = propObj[propName]\n    let prevArgObj = argObj\n    let prevArgValue = undefined\n\n    effect(() => {\n      prevArgObj = argObj\n      deep && ({ argObj, argName, deep } = resolve(el._x_dataStack, expression))\n\n      if (argObj) {\n        // One-way binding\n        if (argObj[argName] !== prevArgValue || argObj !== prevArgObj) {\n          propObj[propName] = argObj[argName]\n        }\n\n        // Two-way binding\n        if (bind && propObj[propName] !== prevPropValue) {\n          argObj[argName] = propObj[propName]\n        }\n\n        prevArgValue = argObj[argName]\n        prevPropValue = propObj[propName]\n      } else {\n        // The evaluator is used in\n        // case that the argument is\n        // not a property of the parent\n        // component's data (one-way binding).\n        const argValue = evaluate(expression)\n\n        if (argValue !== prevArgValue) {\n          propObj[propName] = argValue\n          prevArgValue = argValue\n        }\n      }\n    })\n  })\n\n  /**\n   * Transforms an example-string into an exampleString.\n   *\n   * @param {string} s String to camelize\n   * @returns {string} The camelized string\n   */\n  function camelize(s) {\n    return s.replace(/-./g, (x) => x[1].toUpperCase())\n  }\n\n  /**\n   * Find the closest property from an expression by searching Alpine data\n   * stacks of the parent components.\n   *\n   * @param {object} stack Alpine data stack\n   * @param {string} expression The directive attribute value\n   * @returns {object} Resolved argument parameters\n   */\n  function resolve(stack, expression) {\n    let argObj = null\n    let argName = null\n    let deep = false\n\n    for (let i = 1; i < stack.length; i++) {\n      if (expression in stack[i]) {\n        argObj = stack[i]\n        argName = expression\n        break\n      } else if (expression.includes('.')) {\n        const dotNotation = expression.split('.')\n        const obj = dotNotation\n          .slice(0, -1)\n          .reduce((o, i) => (typeof o === 'object' ? o[i] : false), stack[i])\n\n        if (obj && /^[a-zA-Z0-9_$]+$/.test(last)) {\n          argObj = obj\n          argName = dotNotation[dotNotation.length - 1]\n          deep = obj !== stack[i]\n          break\n        }\n      }\n    }\n\n    return { argObj, argName, deep }\n  }\n}\n", "import argh from '../src/index.js'\n\ndocument.addEventListener('alpine:init', () => window.Alpine.plugin(argh))\n"],
  "mappings": "MAAe,WAAU,EAAQ,CAE/B,EAAO,UAAU,OAAQ,CAAC,EAAI,CAAE,QAAO,YAAW,cAAc,CAAE,SAAQ,cAAe,CAGvF,GAAI,CAAC,EACH,OAGF,GAAI,CAAE,SAAQ,UAAS,QAAS,EAAQ,EAAG,aAAc,CAAU,EAC7D,EAAU,EAAG,aAAa,GAC1B,EAAW,EAAS,CAAK,EACzB,EAAO,GAAU,EAAU,SAAS,MAAM,EAE5C,EAAgB,EAAQ,GACxB,EAAa,EACb,EAEJ,EAAO,IAAM,CAIX,GAHA,EAAa,EACb,GAAS,EAAE,SAAQ,UAAS,MAAK,EAAI,EAAQ,EAAG,aAAc,CAAU,GAEpE,EAEF,AAAI,GAAO,KAAa,GAAgB,IAAW,IACjD,GAAQ,GAAY,EAAO,IAIzB,GAAQ,EAAQ,KAAc,GAChC,GAAO,GAAW,EAAQ,IAG5B,EAAe,EAAO,GACtB,EAAgB,EAAQ,OACnB,CAKL,GAAM,GAAW,EAAS,CAAU,EAEpC,AAAI,IAAa,GACf,GAAQ,GAAY,EACpB,EAAe,EAEnB,CACF,CAAC,CACH,CAAC,EAQD,WAAkB,EAAG,CACnB,MAAO,GAAE,QAAQ,MAAO,AAAC,GAAM,EAAE,GAAG,YAAY,CAAC,CACnD,CAUA,WAAiB,EAAO,EAAY,CAClC,GAAI,GAAS,KACT,EAAU,KACV,EAAO,GAEX,OAAS,GAAI,EAAG,EAAI,EAAM,OAAQ,IAChC,GAAI,IAAc,GAAM,GAAI,CAC1B,EAAS,EAAM,GACf,EAAU,EACV,KACF,SAAW,EAAW,SAAS,GAAG,EAAG,CACnC,GAAM,GAAc,EAAW,MAAM,GAAG,EAClC,EAAM,EACT,MAAM,EAAG,EAAE,EACX,OAAO,CAAC,EAAG,IAAO,MAAO,IAAM,SAAW,EAAE,GAAK,GAAQ,EAAM,EAAE,EAEpE,GAAI,GAAO,mBAAmB,KAAK,IAAI,EAAG,CACxC,EAAS,EACT,EAAU,EAAY,EAAY,OAAS,GAC3C,EAAO,IAAQ,EAAM,GACrB,KACF,CACF,CAGF,MAAO,CAAE,SAAQ,UAAS,MAAK,CACjC,CACF,CC7FA,SAAS,iBAAiB,cAAe,IAAM,OAAO,OAAO,OAAO,CAAI,CAAC",
  "names": []
}
